{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pet_Frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const login = async (email, password) => {\n    setLoading(true);\n    // Mock login - in real app, this would be an API call\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Simple mock validation\n        if (email === 'a@a.com' && password === '123') {\n          const mockUser = {\n            id: 1,\n            name: \"Nguyễn Văn A\",\n            email: email\n          };\n          setUser(mockUser);\n          setLoading(false);\n          resolve(mockUser);\n        } else {\n          setLoading(false);\n          reject(new Error('Email hoặc mật khẩu không đúng'));\n        }\n      }, 1000);\n    });\n  };\n  const logout = () => {\n    setUser(null);\n  };\n  const register = async userData => {\n    setLoading(true);\n    // Mock registration\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"wTzXmCFe6HlddNT0jYEkR+YkPsQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","login","email","password","Promise","resolve","reject","setTimeout","mockUser","id","name","logout","register","userData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Pet_Frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    // Mock login - in real app, this would be an API call\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        // Simple mock validation\r\n        if (email === 'a@a.com' && password === '123') {\r\n          const mockUser = {\r\n            id: 1,\r\n            name: \"Nguyễn Văn A\",\r\n            email: email\r\n          };\r\n          setUser(mockUser);\r\n          setLoading(false);\r\n          resolve(mockUser);\r\n        } else {\r\n          setLoading(false);\r\n          reject(new Error('Email hoặc mật khẩu không đúng'));\r\n        }\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    setLoading(true);\r\n    // Mock registration\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    register\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGN,UAAU,CAACG,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMgB,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCH,UAAU,CAAC,IAAI,CAAC;IAChB;IACA,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QACf;QACA,IAAIL,KAAK,KAAK,SAAS,IAAIC,QAAQ,KAAK,KAAK,EAAE;UAC7C,MAAMK,QAAQ,GAAG;YACfC,EAAE,EAAE,CAAC;YACLC,IAAI,EAAE,cAAc;YACpBR,KAAK,EAAEA;UACT,CAAC;UACDJ,OAAO,CAACU,QAAQ,CAAC;UACjBR,UAAU,CAAC,KAAK,CAAC;UACjBK,OAAO,CAACG,QAAQ,CAAC;QACnB,CAAC,MAAM;UACLR,UAAU,CAAC,KAAK,CAAC;UACjBM,MAAM,CAAC,IAAIb,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACrD;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAED,MAAMkB,MAAM,GAAGA,CAAA,KAAM;IACnBb,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMc,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnCb,UAAU,CAAC,IAAI,CAAC;IAChB;IACAO,UAAU,CAAC,MAAM;MACfP,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMc,KAAK,GAAG;IACZjB,IAAI;IACJE,OAAO;IACPE,KAAK;IACLU,MAAM;IACNC;EACF,CAAC;EAED,oBACExB,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAChCA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,GAAA,CApDWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}