import React, {
  createContext,
  useState,
  useContext,
  useEffect,
  useCallback,
} from "react";
import { apiFetch as baseApiFetch } from "../utils/api";
import { useToast } from "./ToastContext";
import { jwtDecode } from "jwt-decode";

// T·∫°o context ƒë·ªÉ chia s·∫ª tr·∫°ng th√°i ƒëƒÉng nh·∫≠p gi·ªØa c√°c component
const AuthContext = createContext();

// Hook ti·ªán d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng AuthContext trong component kh√°c
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within AuthProvider");
  }
  return context;
};

// Component cung c·∫•p d·ªØ li·ªáu ƒëƒÉng nh·∫≠p cho to√†n ·ª©ng d·ª•ng
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);       // L∆∞u th√¥ng tin user (email, name,...)
  const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i loading khi login/register
  const [token, setToken] = useState(null);      // Token JWT hi·ªán t·∫°i
  const { showToast } = useToast();              // Hi·ªÉn th·ªã th√¥ng b√°o toast

  // --- 1Ô∏è‚É£ Khi trang load l√™n: l·∫•y d·ªØ li·ªáu t·ª´ localStorage ---
  useEffect(() => {
    const storedToken = localStorage.getItem("auth_token");
    const storedUser = localStorage.getItem("auth_user");

    if (storedToken) {
      try {
        const decoded = jwtDecode(storedToken);
        const exp = decoded.exp * 1000; // JWT exp l√† t√≠nh theo gi√¢y ‚Üí nh√¢n 1000 ƒë·ªÉ ra mili
        const now = Date.now();

        // N·∫øu token c√≤n h·∫°n √≠t nh·∫•t 10 gi√¢y th√¨ d√πng ƒë∆∞·ª£c
        if (exp - now > 10 * 1000) {
          setToken(storedToken);
          scheduleTokenRefresh(storedToken); // l√™n l·ªãch t·ª± refresh token
        } else {
          // Token h·∫øt h·∫°n r·ªìi ‚Üí g·ªçi refresh ngay
          console.log("‚ö†Ô∏è Token expired, trying to refresh immediately...");
          refreshToken();
        }
      } catch (err) {
        // Token kh√¥ng h·ª£p l·ªá ‚Üí ƒëƒÉng xu·∫•t
        console.error("Invalid token on startup, logging out...");
        logout();
      }
    }

    // Kh√¥i ph·ª•c th√¥ng tin user t·ª´ localStorage (n·∫øu c√≥)
    if (storedUser) {
      try {
        setUser(JSON.parse(storedUser));
      } catch {
        localStorage.removeItem("auth_user");
      }
    }
  }, []);

  // --- 2Ô∏è‚É£ H√†m login ---
  const login = async (email, password) => {
    setLoading(true);
    try {
      // G·ªçi API ƒëƒÉng nh·∫≠p
      const response = await baseApiFetch("/v1/auth/login", {
        method: "POST",
        body: { identifier: email, password }, // body g·ª≠i ƒëi
      });

      // API tr·∫£ v·ªÅ { result: { token, authenticated }, success, message }
      const receivedToken = response?.result?.token;
      const authenticated = response?.result?.authenticated;

      // N·∫øu kh√¥ng c√≥ token ho·∫∑c login sai ‚Üí b√°o l·ªói
      if (!receivedToken || authenticated === false) {
        throw new Error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
      }

      // L∆∞u token v√†o state + localStorage
      setToken(receivedToken);
      localStorage.setItem("auth_token", receivedToken);
      scheduleTokenRefresh(receivedToken); // ƒë·∫∑t l·ªãch refresh token

      // Sau khi login th√†nh c√¥ng ‚Üí l·∫•y th√¥ng tin chi ti·∫øt c·ªßa user
      try {
        const loaded = await loadMyInfo(receivedToken);
        return loaded;
      } catch (e) {
        // N·∫øu kh√¥ng load ƒë∆∞·ª£c, ch·ªâ l∆∞u l·∫°i email ƒë∆°n gi·∫£n
        const nextUser = { email };
        setUser(nextUser);
        localStorage.setItem("auth_user", JSON.stringify(nextUser));
        return nextUser;
      }
    } finally {
      setLoading(false);
    }
  };

  // --- 3Ô∏è‚É£ H√†m logout ---
  const logout = async () => {
  try {
    if (token) {
      // G·ª≠i request logout k√®m token hi·ªán t·∫°i
      await baseApiFetch("/v1/auth/logout", {
        method: "POST",
        body: { token } // g·ª≠i Bearer token trong body
      });
    }
  } catch (err) {
    console.warn("‚ö†Ô∏è Logout API failed (c√≥ th·ªÉ token ƒë√£ h·∫øt h·∫°n):", err.message);
  } finally {
    // D√π API fail v·∫´n x√≥a local ƒë·ªÉ tr√°nh b·ªã k·∫πt
    setUser(null);
    setToken(null);
    localStorage.removeItem("auth_token");
    localStorage.removeItem("auth_user");
    showToast("ƒêƒÉng xu·∫•t th√†nh c√¥ng", "success");
  }
};


  // --- 4Ô∏è‚É£ H√†m register (gi·∫£ l·∫≠p, c√≥ th·ªÉ ƒë·ªïi sang API th·∫≠t) ---
  const register = async (userData) => {
    setLoading(true);
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log("Registering user:", userData);
        setLoading(false);
        resolve({
          id: Date.now(),
          ...userData,
        });
      }, 1000);
    });
  };

  // --- 5Ô∏è‚É£ ƒê·∫∑t l·ªãch refresh token ---
  const scheduleTokenRefresh = useCallback(
    (tokenToUse) => {
      try {
        const decoded = jwtDecode(tokenToUse);
        const exp = decoded.exp * 1000;
        const now = Date.now();

        // T·ª± refresh token tr∆∞·ªõc khi n√≥ h·∫øt h·∫°n 1 ph√∫t
        const refreshTime = exp - now - 60 * 1000;

        if (refreshTime > 0) {
          console.log(
            `‚è∞ Will refresh token in ${Math.round(refreshTime / 1000)} seconds`
          );

          // ƒê·∫∑t h·∫πn gi·ªù ƒë·ªÉ g·ªçi API refresh
          setTimeout(async () => {
            await refreshToken();
          }, refreshTime);
        }
      } catch (err) {
        console.error("Cannot decode token", err);
      }
    },
    []
  );

  // --- 6Ô∏è‚É£ H√†m refresh token ---
  const refreshToken = useCallback(async () => {
    // L·∫•y token hi·ªán t·∫°i t·ª´ localStorage (tr√°nh tr∆∞·ªùng h·ª£p token c≈© trong state)
    const currentToken = localStorage.getItem("auth_token");
    if (!currentToken) return null;

    try {
      // G·ªçi API refresh token
      const res = await baseApiFetch("/v1/auth/refresh-token", {
        method: "POST",
        body: { token: currentToken },
      });

      const newToken = res?.result?.token;
      if (newToken) {
        // C·∫≠p nh·∫≠t token m·ªõi
        setToken(newToken);
        localStorage.setItem("auth_token", newToken);

        // ƒê·∫∑t l·∫°i l·ªãch refresh cho token m·ªõi
        scheduleTokenRefresh(newToken);

        console.log("‚úÖ Token refreshed successfully");
        return newToken;
      }
    } catch (err) {
      console.error("‚ùå Refresh token failed", err);
      logout(); // N·∫øu refresh th·∫•t b·∫°i ‚Üí logout lu√¥n
    }
    return null;
  }, [logout, scheduleTokenRefresh]);

  // --- 7Ô∏è‚É£ H√†m g·ªçi API c√≥ t·ª± ƒë·ªông g·∫Øn token ---
  const apiFetch = useCallback(
    (path, options = {}) => {
      return baseApiFetch(path, {
        ...options,
        token,
        onTokenRefresh: refreshToken, // n·∫øu token h·∫øt h·∫°n, t·ª± g·ªçi refresh
      });
    },
    [token, refreshToken]
  );

  // --- 8Ô∏è‚É£ H√†m load th√¥ng tin user hi·ªán t·∫°i ---
  const loadMyInfo = useCallback(
    async (overrideToken) => {
      const useToken = overrideToken || token;
      if (!useToken) throw new Error("No auth token");

      // G·ªçi API /v1/users/myInfo
      const res = await baseApiFetch("/v1/users/myInfo", { token: useToken });
      const userData = res?.result || res;

      // N·∫øu c√≥ d·ªØ li·ªáu ‚Üí l∆∞u v√†o state + localStorage
      if (userData) {
        setUser(userData);
        localStorage.setItem("auth_user", JSON.stringify(userData));
      }
      return userData;
    },
    [token]
  );

  // --- 9Ô∏è‚É£ Khi c√≥ token m√† ch∆∞a c√≥ user ‚Üí t·ª± load user info ---
  useEffect(() => {
    if (token && !user) {
      loadMyInfo().catch(() => {
        // N·∫øu token kh√¥ng h·ª£p l·ªá ‚Üí x√≥a
        setToken(null);
        localStorage.removeItem("auth_token");
      });
    }
  }, [token, user, loadMyInfo]);

  // --- üîü Cung c·∫•p to√†n b·ªô gi√° tr·ªã ra ngo√†i context ---
  const value = {
    user,
    loading,
    token,
    login,
    logout,
    register,
    apiFetch,
    loadMyInfo,
  };

  // Bao to√†n b·ªô app trong AuthContext
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
